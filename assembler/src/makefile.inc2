#PROJECT := 
#DEPENDS := 

builddir=../../build/
to_src_root=../
EXEC=$(builddir)$(PROJECT)/$(PROG)

CPPS := $(foreach depend,$(DEPENDS),$(wildcard $(to_src_root)$(depend)/*.cpp))


#OBJS := $(abspath $(addprefix $(builddir), $(subst $(to_src_root),,$(CPPS:.cpp=.o))))
OBJS := $(addprefix $(builddir), $(subst $(to_src_root),,$(CPPS:.cpp=.o)))

all:$(EXEC)
	@echo "vvvvvvvvvv MAKE SUCCESSFUL vvvvvvvvvv"

PG=#-pg
CC=g++
CFLAGS=-c -O3 -Wall -pedantic -Wno-long-long -Wno-deprecated -std=gnu++0x $(PG) $(OMP) -I./../common -I./.. $(MYCFLAGS) #-DNDEBUG
LDFLAGS=-O3 -L/usr/local/lib -L/usr/local/apr/lib -lz -llog4cxx -lapr-1 -laprutil-1 $(PG) $(MYLDFLAGS)
DEPSFL=-MM -MG


# link
$(EXEC): $(OBJS)
	@echo "Depends on: "$(DEPENDS)
	@echo "Depends on 2: "$(foreach depend,$(DEPENDS),$(depend))
	@echo "Source files: "$(CPPS)
	@echo "Object files: "$(OBJS)
	@echo "Deps: "$(OBJS:.o=.d)
	$(CC) $(OBJS) $(LDFLAGS) -o $@
#	@cp $(builddir)/$@ .

# pull in dependency info for *existing* .o files
#-include $(OBJS:.o=.d)


#%.o: $(addprefix $(to_src_root), $(subst $(builddir),,%.cpp)) $(dir %.cpp).dir
#%.o: ../../build/debruijn/.dir #$(addsuffix .dir, $(dir %.cpp)) #$(addprefix $(to_src_root), $(subst $(builddir),,%.cpp))
%.o: $(addsuffix .dir, $(dir %))
	@echo "Making "$@"; Pattern:"$*
	@echo $(addsuffix .dir, $(dir ../../build/debruijn/assembler))
	@echo $(addprefix $(to_src_root), $(subst $(builddir),,$*.cpp))
	$(CC) $(CFLAGS) $< -o $@
	@echo $(builddir)\\ > $*.d
	$(CC) $(DEPSFL) $(CFLAGS) $< >> $*.d
	@sed -e 's/.*://' -e 's/\\$$//' < $*.d | fmt -1 | \
	sed -e 's/^ *//' -e 's/$$/:/' >> $*.d

%.dir:
	@echo "Making dir "$*
	mkdir -p $*
	touch $@

.PRECIOUS: %.dir

# remove compilation products
clean:
	rm -rf ./$(builddir)

